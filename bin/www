#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server-pruebas:server');
var http = require('http');
var cors = require('cors')
var net = require('net')
var jsonSocket = require('json-socket')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
app.use(cors())

/**
 * Create HTTP server.
 */

var server = net.createServer();
//var server = net.createServer()
// var io = new net.Socket({port})
server.on('connection', (socket) => {
  let io = new jsonSocket(socket)
  io.on('data', (message) => {
    console.log(message.toString())
    io.sendMessage({
      message: "Hola mundo"
    })
  })
  io.on('close', () => {
    console.log("Sesión cerrada")
  })
  io.on('error', (err) => {
    console.log("Error en la conexión")
    console.log(err)
  })
})
server.listen(port, () => {
  console.log('server is listening on port ', port)
})
/**
 * Listen on provided port, on all network interfaces.
 */
server.on('listening', onListening);
server.on('error', onError);
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
